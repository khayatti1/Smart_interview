generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  applications      Application[]
  cvAnalyses        CVAnalysis[]
  createdJobOffers  JobOffer[]       @relation("CreatedBy")
  managedCompanies  CompanyManager[]

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  location    String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobOffers JobOffer[]
  managers  CompanyManager[]

  @@map("companies")
}

model CompanyManager {
  id        String      @id @default(cuid())
  userId    String
  companyId String
  role      ManagerRole @default(RECRUITER)
  createdAt DateTime    @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("company_managers")
}

model JobOffer {
  id          String   @id @default(cuid())
  title       String
  description String
  skills      String[]
  salary      String?
  location    String?
  type        String?
  deadline    DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  companyId   String
  createdById String

  // Relations
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy   User          @relation("CreatedBy", fields: [createdById], references: [id])
  applications Application[]

  @@map("job_offers")
}

model Application {
  id        String            @id @default(cuid())
  status    ApplicationStatus @default(PENDING)
  cvScore   Float?            // Added contextual CV score for this specific job application
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Foreign keys
  candidateId String
  jobOfferId  String

  // Relations
  candidate User     @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobOffer  JobOffer @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  test      Test?

  @@unique([candidateId, jobOfferId])
  @@map("applications")
}

model Test {
  id            String     @id @default(cuid())
  questions     Json
  testAnswers   Json?
  score         Float?
  status        TestStatus @default(PENDING)
  timeLimit     Int        @default(1800) // 30 minutes en secondes
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Foreign key
  applicationId String @unique

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model CVAnalysis {
  id          String   @id @default(cuid())
  filePath    String
  fileName    String?
  score       Float?
  analysis    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key
  userId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cv_analyses")
}

enum Role {
  CEO
  RECRUITER
  CANDIDATE
}

enum ManagerRole {
  CEO
  RECRUITER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  EXPIRED
}
